@typeparam TItem

<div class="container-sm py-4">
    @ItemContent(Items.ElementAt(selectedIndex))
</div>

<nav aria-label="Pagination functionality">
    <ul class="pagination pagination-lg justify-content-center">
        <li class="page-item @(previousDisabled ? "disabled" : "")" disabled="@previousDisabled">
            <a class="page-link" @onclick="@(() => SetIndex(0))">
                <span>⏪</span> @*<---*@
            </a>     
        </li>
        <li class="page-item @(previousDisabled ? "disabled" : "")" disabled="@previousDisabled">
            <a class="page-link" @onclick="DecrementIndex"><span>⬅️</span></a>
        </li>
        @foreach ((TItem item,int index) in GetForRenderPages())
        {
            var isActive = index == selectedIndex;
            var page = index + 1;
            <li class="page-item @(isActive ? "active" : "")">
                <a class="page-link" @onclick="@(() => SetIndex(index))">
                    @ItemLabel(item,page);
                </a>
            </li>
        }
        <li class="page-item @(nextDisabled ? "disabled" : "")" disabled="@nextDisabled">
            <a class="page-link" @onclick="IncrementIndex"><span>➡️</span></a>
        </li>
        <li class="page-item @(nextDisabled ? "disabled" : "")" disabled="@nextDisabled">
            <a class="page-link" @onclick="@(() => SetIndex(Items.Count - 1))">
                <span>⏩</span>
            </a>
        </li>
    </ul>
</nav>

@code {
    [Parameter,EditorRequired]
    public List<TItem> Items { get; set; }

    [Parameter,EditorRequired]
    public RenderFragment<TItem> ItemContent { get; set; }

    [Parameter,EditorRequired]
    public Func<TItem,int,MarkupString> ItemLabel { get; set; }

    int selectedIndex;

    bool previousDisabled => selectedIndex == 0;
    bool nextDisabled => selectedIndex == Items.Count - 1;

    void IncrementIndex() => selectedIndex++;
    void DecrementIndex() => selectedIndex--;
    void SetIndex(int index) => selectedIndex = index;

    public List<(TItem item,int index)> GetForRenderPages()
    {
        var list = new List<(TItem item,int index)>(3);
        for (int i = 0; i < Items.Count; i++)
        {
            if (i== selectedIndex-1 || i == selectedIndex || i == selectedIndex +1)
            {
                list.Add((Items[i],i));
            }
        }

        return list;
    }


    protected override void OnInitialized()
    {
        selectedIndex = Items.Count - 1;
    }

}
